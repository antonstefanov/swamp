{
  // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Command Sync": {
    "scope": "reason",
    "prefix": "cmdsync",
    "description": "Create a template for a sync command",
    "body": [
      "include Command.Sync.Make({",
      "open Bootstrap;",

      "[@bs.deriving abstract]",
      "type t= {",
      "\t${1:option1}: ${2:bool},",
      "\t[@bs.optional]",
      "\t${4:option2}: ${5:string},",
      "};",

      "let command = \"${TM_FILENAME_BASE/(.*)/${1:/downcase}/} ${9:[options]}}\";",
      "let description = \"${10:description}\";",

      "let handler = argv => {",
      "Log.info(\"${1:option1}\",argv->${1:option1}Get)",
      "Log.info(\"${4:option2}\",argv->${4:option1}Get)",
      "}",

      "let builder = yargs =>",
      "  Args.(yargs",
      "|> Arg.String.make(~arg=\"${1:option1}\", ~desc=\"${3:description}\")",
      "|> Arg.String.make(~arg=\"${4:option1}\", ~desc=\"${6:description}\", ~required=Optional)",
      ");",
      "});"
    ]
  }
}
